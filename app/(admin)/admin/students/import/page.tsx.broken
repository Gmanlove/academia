"use client"

import Papa from "papaparse"
import { useState, useRef, useCallback } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Checkbox } from "@/components/ui/checkbox"
import { Separator } from "@/components/ui/separator"
import { ScrollArea } from "@/components/ui/scroll-area"
import { db } from "@/lib/mock-db"
import type { Student, School, ClassRoom } from "@/lib/types"
import {
  Upload,
  Download,
  CheckCircle,
  AlertCircle,
  XCircle,
  FileText,
  Users,
  MapPin,
  Mail,
  Phone,
  User,
  BookOpen,
  Building2,
  Loader2,
  ArrowLeft,
  FileSpreadsheet,
  Eye,
  EyeOff,
  Trash2,
  RefreshCw,
  Save,
} from "lucide-react"

type ImportRow = {
  rowIndex: number
  studentId?: string
  name: string
  email?: string
  dateOfBirth?: string
  gender?: "Male" | "Female"
  schoolId?: string
  schoolName?: string
  classId?: string
  className?: string
  parentName?: string
  parentEmail?: string
  parentPhone?: string
  secondaryParentName?: string
  secondaryParentEmail?: string
  secondaryParentPhone?: string
  address?: string
  status: "pending" | "valid" | "error" | "imported"
  errors: string[]
  warnings: string[]
}
type ColumnMapping = {
  [key: string]: string // CSV column -> our field
}

type ImportStats = {
  total: number
  valid: number
  errors: number
  warnings: number
  imported: number
}

export default function StudentImportPage() {
  const [currentStep, setCurrentStep] = useState<"upload" | "mapping" | "validation" | "import">("upload")
  const [file, setFile] = useState<File | null>(null)
  const [csvData, setCsvData] = useState<any[]>([])
  const [csvHeaders, setCsvHeaders] = useState<string[]>([])
  const [columnMapping, setColumnMapping] = useState<ColumnMapping>({})
  const [importRows, setImportRows] = useState<ImportRow[]>([])
  const [isProcessing, setIsProcessing] = useState(false)
  const [showErrors, setShowErrors] = useState(true)
  const [showWarnings, setShowWarnings] = useState(true)
  const [selectedRows, setSelectedRows] = useState<number[]>([])
  const fileInputRef = useRef<HTMLInputElement>(null)

  const schools = db.listSchools()
  const classes = db.listClasses()

  // Field mapping options
  const fieldOptions = [
    { value: "", label: "-- Skip Column --" },
    { value: "name", label: "Student Name" },
    { value: "email", label: "Student Email" },
    { value: "dateOfBirth", label: "Date of Birth" },
    { value: "gender", label: "Gender" },
    { value: "schoolName", label: "School Name" },
    { value: "className", label: "Class Name" },
    { value: "parentName", label: "Parent Name" },
    { value: "parentEmail", label: "Parent Email" },
    { value: "parentPhone", label: "Parent Phone" },
    { value: "secondaryParentName", label: "Secondary Parent Name" },
    { value: "secondaryParentEmail", label: "Secondary Parent Email" },
    { value: "secondaryParentPhone", label: "Secondary Parent Phone" },
    { value: "address", label: "Address" },
  ]

  const stats: ImportStats = {
    total: importRows.length,
    valid: importRows.filter(row => row.status === "valid").length,
    errors: importRows.filter(row => row.status === "error").length,
    warnings: importRows.filter(row => row.warnings.length > 0).length,
    imported: importRows.filter(row => row.status === "imported").length,
  }

  const requiredFields = [
    { key: "studentId", label: "Student ID", required: true },
    { key: "name", label: "Full Name", required: true },
    { key: "email", label: "Email", required: false },
    { key: "dateOfBirth", label: "Date of Birth", required: false },
    { key: "gender", label: "Gender", required: false },
    { key: "schoolName", label: "School Name", required: false },
    { key: "className", label: "Class Name", required: false },
    { key: "parentName", label: "Parent Name", required: false },
    { key: "parentEmail", label: "Parent Email", required: false },
    { key: "parentPhone", label: "Parent Phone", required: false },
    { key: "address", label: "Address", required: false },
  ]

  function handleFileUpload(event: React.ChangeEvent<HTMLInputElement>) {
    const uploadedFile = event.target.files?.[0]
    if (!uploadedFile) return

    setFile(uploadedFile)
    
    Papa.parse(uploadedFile, {
      header: true,
      skipEmptyLines: true,
      complete: (result) => {
        if (result.data && result.data.length > 0) {
          const firstRow = result.data[0] as any
          setAvailableColumns(Object.keys(firstRow))
          
          // Auto-map common column names
          const autoMapping: Record<string, string> = {}
          Object.keys(firstRow).forEach(col => {
            const lowerCol = col.toLowerCase().replace(/[^a-z]/g, '')
            if (lowerCol.includes('studentid') || lowerCol.includes('id')) autoMapping.studentId = col
            if (lowerCol.includes('name') && !lowerCol.includes('parent') && !lowerCol.includes('school')) autoMapping.name = col
            if (lowerCol.includes('email') && !lowerCol.includes('parent')) autoMapping.email = col
            if (lowerCol.includes('birth') || lowerCol.includes('dob')) autoMapping.dateOfBirth = col
            if (lowerCol.includes('gender') || lowerCol.includes('sex')) autoMapping.gender = col
            if (lowerCol.includes('school')) autoMapping.schoolName = col
            if (lowerCol.includes('class') && !lowerCol.includes('school')) autoMapping.className = col
            if (lowerCol.includes('parent') && lowerCol.includes('name')) autoMapping.parentName = col
            if (lowerCol.includes('parent') && lowerCol.includes('email')) autoMapping.parentEmail = col
            if (lowerCol.includes('parent') && lowerCol.includes('phone')) autoMapping.parentPhone = col
            if (lowerCol.includes('address')) autoMapping.address = col
          })
          
          setColumnMapping(autoMapping)
          setStep("map")
        }
      },
      error: (error) => {
        console.error("CSV parsing error:", error)
      }
    })
  }

  function handleMapping() {
    if (!file) return

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: (result) => {
        const mappedRows = (result.data as any[]).map((row, index) => {
          const mappedRow: ImportRow = {
            studentId: row[columnMapping.studentId] || `AUTO_${Date.now()}_${index}`,
            name: row[columnMapping.name] || "",
            email: row[columnMapping.email] || "",
            dateOfBirth: row[columnMapping.dateOfBirth] || "",
            gender: row[columnMapping.gender] as "Male" | "Female" || undefined,
            schoolName: row[columnMapping.schoolName] || "",
            className: row[columnMapping.className] || "",
            parentName: row[columnMapping.parentName] || "",
            parentEmail: row[columnMapping.parentEmail] || "",
            parentPhone: row[columnMapping.parentPhone] || "",
            address: row[columnMapping.address] || "",
            status: "pending",
            errors: [],
            mapped: false,
          }

          // Validate and map school/class
          if (mappedRow.schoolName) {
            const school = schools.find(s => 
              s.name.toLowerCase() === mappedRow.schoolName.toLowerCase()
            )
            if (school) {
              mappedRow.schoolId = school.id
              mappedRow.mapped = true
            } else {
              mappedRow.errors.push(`School "${mappedRow.schoolName}" not found`)
            }
          }

          if (mappedRow.className && mappedRow.schoolId) {
            const classRoom = classes.find(c => 
              c.name.toLowerCase() === mappedRow.className.toLowerCase() && 
              c.schoolId === mappedRow.schoolId
            )
            if (classRoom) {
              mappedRow.classId = classRoom.id
            } else {
              mappedRow.errors.push(`Class "${mappedRow.className}" not found in selected school`)
            }
          }

          // Validation
          if (!mappedRow.name) {
            mappedRow.errors.push("Name is required")
          }
          if (!mappedRow.studentId) {
            mappedRow.errors.push("Student ID is required")
          }

          mappedRow.status = mappedRow.errors.length > 0 ? "error" : "valid"
          
          return mappedRow
        })

        setImportRows(mappedRows)
        setStep("validate")
      }
    })
  }

  async function handleImport() {
    setImporting(true)
    setStep("import")
    
    const validRows = importRows.filter(row => row.status === "valid")
    const totalRows = validRows.length
    
    try {
      const response = await fetch("/api/students/import", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          rows: validRows.map(row => ({
            studentId: row.studentId,
            name: row.name,
            email: row.email,
            dateOfBirth: row.dateOfBirth,
            gender: row.gender,
            schoolId: row.schoolId || schools[0]?.id,
            classId: row.classId || classes[0]?.id,
            parentName: row.parentName,
            parentEmail: row.parentEmail,
            parentPhone: row.parentPhone,
            address: row.address,
            enrollmentDate: new Date().toISOString(),
            active: true,
            performanceLevel: "Average" as const,
            currentGPA: 0,
          }))
        }),
      })

      if (response.ok) {
        const result = await response.json()
        setImportResult({
          id: `import_${Date.now()}`,
          type: "Students",
          fileName: file?.name || "unknown",
          uploadedBy: "admin",
          uploadedAt: new Date().toISOString(),
          status: "Completed",
          totalRecords: totalRows,
          processedRecords: result.count,
          failedRecords: totalRows - result.count,
          schoolId: schools[0]?.id || "",
        })
        setStep("complete")
      } else {
        throw new Error("Import failed")
      }
    } catch (error) {
      console.error("Import error:", error)
      setImportResult({
        id: `import_${Date.now()}`,
        type: "Students",
        fileName: file?.name || "unknown",
        uploadedBy: "admin",
        uploadedAt: new Date().toISOString(),
        status: "Failed",
        totalRecords: totalRows,
        processedRecords: 0,
        failedRecords: totalRows,
        schoolId: schools[0]?.id || "",
      })
      setStep("complete")
    } finally {
      setImporting(false)
    }
  }

  function downloadTemplate() {
    const template = [
      {
        "Student ID": "STU001",
        "Full Name": "John Doe",
        "Email": "john.doe@email.com",
        "Date of Birth": "2010-01-15",
        "Gender": "Male",
        "School Name": "Acme High School",
        "Class Name": "JSS 1A",
        "Parent Name": "Jane Doe",
        "Parent Email": "jane.doe@email.com",
        "Parent Phone": "+234-803-123-4567",
        "Address": "123 Main Street, Lagos"
      }
    ]

    const csv = Papa.unparse(template)
    const blob = new Blob([csv], { type: "text/csv" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "student_import_template.csv"
    a.click()
    URL.revokeObjectURL(url)
  }

  function resetImport() {
    setStep("upload")
    setFile(null)
    setImportRows([])
    setImportProgress(0)
    setImportResult(null)
    setColumnMapping({})
    setAvailableColumns([])
    if (fileInputRef.current) {
      fileInputRef.current.value = ""
    }
  }

  const validRows = importRows.filter(row => row.status === "valid")
  const errorRows = importRows.filter(row => row.status === "error")

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Import Students</h1>
          <p className="text-muted-foreground">
            Bulk import student data from CSV files with validation and mapping
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Button variant="outline" onClick={downloadTemplate}>
            <Download className="h-4 w-4 mr-2" />
            Download Template
          </Button>
          {step !== "upload" && (
            <Button variant="outline" onClick={resetImport}>
              Start New Import
            </Button>
          )}
        </div>
      </div>

      {/* Progress Indicator */}
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center space-x-4">
            <div className={`flex items-center space-x-2 ${step === "upload" ? "text-primary" : step === "complete" ? "text-green-600" : "text-muted-foreground"}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === "upload" ? "bg-primary text-white" : step === "complete" ? "bg-green-600 text-white" : "bg-muted"}`}>
                1
              </div>
              <span className="font-medium">Upload</span>
            </div>
            <div className="h-px bg-border flex-1" />
            <div className={`flex items-center space-x-2 ${step === "map" ? "text-primary" : (step === "validate" || step === "import" || step === "complete") ? "text-green-600" : "text-muted-foreground"}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === "map" ? "bg-primary text-white" : (step === "validate" || step === "import" || step === "complete") ? "bg-green-600 text-white" : "bg-muted"}`}>
                2
              </div>
              <span className="font-medium">Map Columns</span>
            </div>
            <div className="h-px bg-border flex-1" />
            <div className={`flex items-center space-x-2 ${step === "validate" ? "text-primary" : (step === "import" || step === "complete") ? "text-green-600" : "text-muted-foreground"}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === "validate" ? "bg-primary text-white" : (step === "import" || step === "complete") ? "bg-green-600 text-white" : "bg-muted"}`}>
                3
              </div>
              <span className="font-medium">Validate</span>
            </div>
            <div className="h-px bg-border flex-1" />
            <div className={`flex items-center space-x-2 ${step === "import" ? "text-primary" : step === "complete" ? "text-green-600" : "text-muted-foreground"}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === "import" ? "bg-primary text-white" : step === "complete" ? "bg-green-600 text-white" : "bg-muted"}`}>
                4
              </div>
              <span className="font-medium">Import</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Step Content */}
      {step === "upload" && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Upload className="h-5 w-5" />
              <span>Upload CSV File</span>
            </CardTitle>
            <CardDescription>
              Select a CSV file containing student data. Make sure your file includes headers for proper column mapping.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="border-2 border-dashed border-muted-foreground/25 rounded-lg p-8 text-center">
              <Upload className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <div className="space-y-2">
                <h3 className="text-lg font-semibold">Choose CSV file</h3>
                <p className="text-muted-foreground">
                  Drag and drop your file here, or click to browse
                </p>
                <Input
                  ref={fileInputRef}
                  type="file"
                  accept=".csv"
                  onChange={handleFileUpload}
                  className="hidden"
                />
                <Button onClick={() => fileInputRef.current?.click()}>
                  <FileText className="h-4 w-4 mr-2" />
                  Browse Files
                </Button>
              </div>
            </div>

            {file && (
              <Alert>
                <CheckCircle className="h-4 w-4" />
                <AlertDescription>
                  File "{file.name}" uploaded successfully. {availableColumns.length} columns detected.
                </AlertDescription>
              </Alert>
            )}

            <div className="bg-muted/50 rounded-lg p-4">
              <h4 className="font-semibold mb-2">CSV Requirements:</h4>
              <ul className="text-sm text-muted-foreground space-y-1">
                <li>• File must be in CSV format</li>
                <li>• First row should contain column headers</li>
                <li>• Required fields: Student ID, Full Name</li>
                <li>• Recommended fields: School Name, Class Name, Parent Email</li>
                <li>• Maximum file size: 10MB</li>
              </ul>
            </div>
          </CardContent>
        </Card>
      )}

      {step === "map" && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <MapPin className="h-5 w-5" />
              <span>Map Columns</span>
            </CardTitle>
            <CardDescription>
              Map your CSV columns to the corresponding student fields. Required fields are marked with *.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {requiredFields.map((field) => (
                <div key={field.key} className="space-y-2">
                  <Label htmlFor={field.key}>
                    {field.label} {field.required && <span className="text-red-500">*</span>}
                  </Label>
                  <Select
                    value={columnMapping[field.key] || ""}
                    onValueChange={(value) => 
                      setColumnMapping(prev => ({ ...prev, [field.key]: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select column..." />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="">-- None --</SelectItem>
                      {availableColumns.map((col) => (
                        <SelectItem key={col} value={col}>
                          {col}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              ))}
            </div>

            <div className="flex justify-between">
              <Button variant="outline" onClick={() => setStep("upload")}>
                Back
              </Button>
              <Button 
                onClick={handleMapping}
                disabled={!columnMapping.studentId || !columnMapping.name}
              >
                Next: Validate Data
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {step === "validate" && (
        <div className="space-y-6">
          {/* Summary Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center space-x-2">
                  <Users className="h-8 w-8 text-blue-500" />
                  <div>
                    <p className="text-2xl font-bold">{importRows.length}</p>
                    <p className="text-muted-foreground">Total Records</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-8 w-8 text-green-500" />
                  <div>
                    <p className="text-2xl font-bold">{validRows.length}</p>
                    <p className="text-muted-foreground">Valid Records</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center space-x-2">
                  <XCircle className="h-8 w-8 text-red-500" />
                  <div>
                    <p className="text-2xl font-bold">{errorRows.length}</p>
                    <p className="text-muted-foreground">Errors</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Data Preview */}
          <Card>
            <CardHeader>
              <CardTitle>Data Preview & Validation</CardTitle>
              <CardDescription>
                Review the imported data and fix any validation errors before proceeding.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs defaultValue="all" className="space-y-4">
                <TabsList>
                  <TabsTrigger value="all">All Records ({rows.length})</TabsTrigger>
                  <TabsTrigger value="valid">Valid ({validRows.length})</TabsTrigger>
                  <TabsTrigger value="errors">Errors ({errorRows.length})</TabsTrigger>
                </TabsList>

                <TabsContent value="all">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Status</TableHead>
                        <TableHead>Student ID</TableHead>
                        <TableHead>Name</TableHead>
                        <TableHead>School</TableHead>
                        <TableHead>Class</TableHead>
                        <TableHead>Parent Email</TableHead>
                        <TableHead>Errors</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {rows.slice(0, 10).map((row, index) => (
                        <TableRow key={index}>
                          <TableCell>
                            <Badge variant={row.status === "valid" ? "default" : "destructive"}>
                              {row.status === "valid" ? <CheckCircle className="h-3 w-3 mr-1" /> : <XCircle className="h-3 w-3 mr-1" />}
                              {row.status}
                            </Badge>
                          </TableCell>
                          <TableCell className="font-mono">{row.studentId}</TableCell>
                          <TableCell>{row.name}</TableCell>
                          <TableCell>{row.schoolName || "Not set"}</TableCell>
                          <TableCell>{row.className || "Not set"}</TableCell>
                          <TableCell>{row.parentEmail || "Not set"}</TableCell>
                          <TableCell>
                            {row.errors.length > 0 && (
                              <div className="text-sm text-red-600">
                                {row.errors.join(", ")}
                              </div>
                            )}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                  {rows.length > 10 && (
                    <p className="text-sm text-muted-foreground mt-2">
                      Showing first 10 of {rows.length} records
                    </p>
                  )}
                </TabsContent>

                <TabsContent value="valid">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Student ID</TableHead>
                        <TableHead>Name</TableHead>
                        <TableHead>School</TableHead>
                        <TableHead>Class</TableHead>
                        <TableHead>Parent Email</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {validRows.slice(0, 10).map((row, index) => (
                        <TableRow key={index}>
                          <TableCell className="font-mono">{row.studentId}</TableCell>
                          <TableCell>{row.name}</TableCell>
                          <TableCell>{row.schoolName}</TableCell>
                          <TableCell>{row.className}</TableCell>
                          <TableCell>{row.parentEmail}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TabsContent>

                <TabsContent value="errors">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Student ID</TableHead>
                        <TableHead>Name</TableHead>
                        <TableHead>Issues</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {errorRows.map((row, index) => (
                        <TableRow key={index}>
                          <TableCell className="font-mono">{row.studentId}</TableCell>
                          <TableCell>{row.name}</TableCell>
                          <TableCell>
                            <div className="space-y-1">
                              {row.errors.map((error, errorIndex) => (
                                <Badge key={errorIndex} variant="destructive" className="mr-1">
                                  {error}
                                </Badge>
                              ))}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>

          <div className="flex justify-between">
            <Button variant="outline" onClick={() => setStep("map")}>
              Back
            </Button>
            <Button 
              onClick={handleImport}
              disabled={validRows.length === 0}
            >
              Import {validRows.length} Students
            </Button>
          </div>
        </div>
      )}

      {step === "import" && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Loader2 className="h-5 w-5 animate-spin" />
              <span>Importing Students</span>
            </CardTitle>
            <CardDescription>
              Please wait while we import your student data. This may take a few moments.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Progress</span>
                <span>{importProgress}%</span>
              </div>
              <Progress value={importProgress} />
            </div>
            
            <div className="text-center text-muted-foreground">
              <p>Importing {validRows.length} student records...</p>
            </div>
          </CardContent>
        </Card>
      )}

      {step === "complete" && importResult && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              {importResult.status === "Completed" ? (
                <CheckCircle className="h-5 w-5 text-green-500" />
              ) : (
                <XCircle className="h-5 w-5 text-red-500" />
              )}
              <span>Import {importResult.status}</span>
            </CardTitle>
            <CardDescription>
              {importResult.status === "Completed" 
                ? "Your student data has been successfully imported."
                : "There was an issue importing your student data."}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardContent className="p-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">{importResult.processedRecords}</p>
                    <p className="text-muted-foreground">Successfully Imported</p>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-red-600">{importResult.failedRecords}</p>
                    <p className="text-muted-foreground">Failed Records</p>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold">{importResult.totalRecords}</p>
                    <p className="text-muted-foreground">Total Records</p>
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="flex justify-center space-x-4">
              <Button onClick={resetImport}>
                Import More Students
              </Button>
              <Button variant="outline" asChild>
                <Link href="/admin/students">
                  View Students
                </Link>
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
